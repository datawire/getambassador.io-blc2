import io
from typing import Any, Optional

log: Any


class DeflateDecoder:
    def __init__(self) -> None:
        ...

    def __getattr__(self, name: Any):
        ...

    def decompress(self, data: Any):
        ...


class GzipDecoderState:
    FIRST_MEMBER: int = ...
    OTHER_MEMBERS: int = ...
    SWALLOW_DATA: int = ...


class GzipDecoder:
    def __init__(self) -> None:
        ...

    def __getattr__(self, name: Any):
        ...

    def decompress(self, data: Any):
        ...


class BrotliDecoder:
    def __init__(self) -> None:
        ...

    def decompress(self, data: Any):
        ...

    def flush(self):
        ...


class MultiDecoder:
    def __init__(self, modes: Any) -> None:
        ...

    def flush(self):
        ...

    def decompress(self, data: Any):
        ...


class HTTPResponse(io.IOBase):
    CONTENT_DECODERS: Any = ...
    REDIRECT_STATUSES: Any = ...
    headers: Any = ...
    status: Any = ...
    version: Any = ...
    reason: Any = ...
    strict: Any = ...
    decode_content: Any = ...
    retries: Any = ...
    enforce_content_length: Any = ...
    auto_close: Any = ...
    msg: Any = ...
    chunked: bool = ...
    chunk_left: Any = ...
    length_remaining: Any = ...

    def __init__(self,
                 body: str = ...,
                 headers: Optional[Any] = ...,
                 status: int = ...,
                 version: int = ...,
                 reason: Optional[Any] = ...,
                 strict: int = ...,
                 preload_content: bool = ...,
                 decode_content: bool = ...,
                 original_response: Optional[Any] = ...,
                 pool: Optional[Any] = ...,
                 connection: Optional[Any] = ...,
                 msg: Optional[Any] = ...,
                 retries: Optional[Any] = ...,
                 enforce_content_length: bool = ...,
                 request_method: Optional[Any] = ...,
                 request_url: Optional[Any] = ...,
                 auto_close: bool = ...) -> None:
        ...

    def get_redirect_location(self):
        ...

    def release_conn(self) -> None:
        ...

    def drain_conn(self) -> None:
        ...

    @property
    def data(self):
        ...

    @property
    def connection(self):
        ...

    def isclosed(self):
        ...

    def tell(self):
        ...

    DECODER_ERROR_CLASSES: Any = ...

    def read(self,
             amt: Optional[Any] = ...,
             decode_content: Optional[Any] = ...,
             cache_content: bool = ...):
        ...

    def stream(self,
               amt: Any = ...,
               decode_content: Optional[Any] = ...) -> None:
        ...

    @classmethod
    def from_httplib(ResponseCls: Any, r: Any, **response_kw: Any):
        ...

    def getheaders(self):
        ...

    def getheader(self, name: Any, default: Optional[Any] = ...):
        ...

    def info(self):
        ...

    def close(self) -> None:
        ...

    @property
    def closed(self):
        ...

    def fileno(self):
        ...

    def flush(self):
        ...

    def readable(self):
        ...

    def readinto(self, b: Any):
        ...

    def supports_chunked_reads(self):
        ...

    def read_chunked(self,
                     amt: Optional[Any] = ...,
                     decode_content: Optional[Any] = ...) -> None:
        ...

    def geturl(self):
        ...

    def __iter__(self) -> Any:
        ...
